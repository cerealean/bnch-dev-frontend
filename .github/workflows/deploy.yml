name: Deploy to Dreamhost

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version to deploy (e.g., v1.2.3)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      dry_run:
        description: 'Perform a dry run (test deployment without actually uploading files)'
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      version:
        description: 'Semantic version to deploy (e.g., v1.2.3)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: string
      dry_run:
        description: 'Perform a dry run'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    name: Deploy v${{ inputs.version }} to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid semantic version format. Expected format: v1.2.3 or 1.2.3"
            exit 1
          fi
          echo "Version ${{ inputs.version }} is valid"

      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build Angular application for ${{ inputs.environment }}
        run: |
          echo "Building for environment: ${{ inputs.environment }}"
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "🏗️ Building production version..."
            npm run build:prod
          else
            echo "🏗️ Building development version..."
            npm run build
          fi
          
          # Verify build output exists
          if [ ! -d "./dist/bnch-benchmarker-app/browser" ]; then
            echo "❌ Build failed: Output directory not found"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
          ls -la ./dist/bnch-benchmarker-app/browser/ | head -10

      - name: Create deployment info file
        run: |
          mkdir -p ./dist/bnch-benchmarker-app/browser
          
          # Create deployment info with proper JSON formatting
          cat > ./dist/bnch-benchmarker-app/browser/deployment-info.json << JSON_EOF
          {
            "version": "${{ inputs.version }}",
            "environment": "${{ inputs.environment }}",
            "deployedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitCommit": "$(git rev-parse HEAD)",
            "gitBranch": "$(git rev-parse --abbrev-ref HEAD)",
            "buildNumber": "${{ github.run_number }}",
            "deploymentId": "${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "workflow": "${{ github.workflow }}",
            "actor": "${{ github.actor }}"
          }
          JSON_EOF
          
          # Validate JSON format
          if command -v jq > /dev/null; then
            echo "Validating JSON format..."
            jq . ./dist/bnch-benchmarker-app/browser/deployment-info.json > /dev/null
            echo "✅ deployment-info.json is valid JSON"
          else
            echo "⚠️ jq not available, skipping JSON validation"
          fi
          
          # Display deployment info content for verification
          echo "📄 Deployment info content:"
          cat ./dist/bnch-benchmarker-app/browser/deployment-info.json

      - name: Pre-deployment verification
        run: |
          echo "🔍 Pre-deployment verification..."
          echo "📁 Files to be deployed:"
          find ./dist/bnch-benchmarker-app/browser/ -type f | head -20
          echo ""
          echo "📊 Total files: $(find ./dist/bnch-benchmarker-app/browser/ -type f | wc -l)"
          echo "📏 Total size: $(du -sh ./dist/bnch-benchmarker-app/browser/ | cut -f1)"

      - name: Download previous deployment info for rollback
        if: ${{ !inputs.dry_run }}
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: deployment-info-${{ inputs.environment }}-latest
          path: ./previous-deployment/

      - name: Prepare rollback information
        if: ${{ !inputs.dry_run }}
        run: |
          mkdir -p deployment-artifacts
          
          # Get previous version if available
          if [ -f "./previous-deployment/deployed-version.txt" ]; then
            PREVIOUS_VERSION=$(cat ./previous-deployment/deployed-version.txt)
            echo "📋 Previous version detected: $PREVIOUS_VERSION"
            echo "$PREVIOUS_VERSION" > deployment-artifacts/previous-version.txt
          else
            echo "📋 No previous deployment found"
            echo "none" > deployment-artifacts/previous-version.txt
          fi
          
          # Store current version as the new "previous" for next deployment
          echo "${{ inputs.version }}" > deployment-artifacts/current-version-backup.txt

      - name: Deploy to Dreamhost (${{ inputs.environment }}) via SFTP
        if: ${{ !inputs.dry_run }}
        uses: Dylan700/sftp-upload-action@latest
        with:
          server: ${{ secrets.DREAMHOST_FTP_SERVER }}
          username: ${{ secrets.DREAMHOST_FTP_USERNAME }}
          password: ${{ secrets.DREAMHOST_FTP_PASSWORD }}
          port: 22
          delete: true
          uploads: |
            ./dist/bnch-benchmarker-app/browser/ => ${{ inputs.environment == 'production' && './bnch.dev/' || './staging.bnch.dev/' }}

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Commit:** $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed At:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "✅ **Dry run completed successfully!** No files were actually uploaded." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.environment }}" = "production" ]; then
              echo "🌐 **Live URL:** [https://bnch.dev](https://bnch.dev)" >> $GITHUB_STEP_SUMMARY
            else
              echo "🔧 **Staging URL:** [https://staging.bnch.dev](https://staging.bnch.dev)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Size:** $(du -sh ./dist/bnch-benchmarker-app/browser/ 2>/dev/null | cut -f1 || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Deployed:** $(find ./dist/bnch-benchmarker-app/browser/ -type f 2>/dev/null | wc -l || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY
          
          # Add rollback information to summary
          if [ "${{ inputs.dry_run }}" = "false" ] && [ -f "deployment-artifacts/previous-version.txt" ]; then
            PREVIOUS_VERSION=$(cat deployment-artifacts/previous-version.txt)
            if [ "$PREVIOUS_VERSION" != "none" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔄 Rollback Information" >> $GITHUB_STEP_SUMMARY
              echo "If you need to rollback this deployment:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Previous Version:** \`$PREVIOUS_VERSION\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Rollback Commands:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`powershell" >> $GITHUB_STEP_SUMMARY
              echo "# Using rollback script:" >> $GITHUB_STEP_SUMMARY
              echo "./rollback.ps1 -Environment \"${{ inputs.environment }}\"" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "# Using deploy script with previous version:" >> $GITHUB_STEP_SUMMARY
              echo "./deploy.ps1 -Version \"$PREVIOUS_VERSION\" -Environment \"${{ inputs.environment }}\"" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "# Using GitHub CLI:" >> $GITHUB_STEP_SUMMARY
              echo "gh workflow run rollback.yml --field environment=\"${{ inputs.environment }}\" --field confirm_rollback=\"CONFIRM\"" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "📖 [Rollback Workflow](https://github.com/${{ github.repository }}/actions/workflows/rollback.yml)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Create deployment artifact
        if: ${{ !inputs.dry_run }}
        run: |
          mkdir -p deployment-artifacts
          echo "${{ inputs.version }}" > deployment-artifacts/deployed-version.txt
          echo "${{ inputs.environment }}" > deployment-artifacts/environment.txt
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > deployment-artifacts/deployment-time.txt
          echo "$(git rev-parse HEAD)" > deployment-artifacts/git-commit.txt
          
          # Create rollback information
          echo "Creating rollback information..."
          cp ./dist/bnch-benchmarker-app/browser/deployment-info.json deployment-artifacts/
          
          # Store deployment history for rollback capability
          cat > deployment-artifacts/rollback-info.json << ROLLBACK_EOF
          {
            "currentVersion": "${{ inputs.version }}",
            "previousVersion": "$(cat deployment-artifacts/previous-version.txt 2>/dev/null || echo 'none')",
            "environment": "${{ inputs.environment }}",
            "deploymentTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitCommit": "$(git rev-parse HEAD)",
            "rollbackInstructions": {
              "manual": "Go to Actions > Deploy to Dreamhost > Run workflow with previous version",
              "script": "./deploy.ps1 -Version \"$(cat deployment-artifacts/previous-version.txt 2>/dev/null || echo 'PREVIOUS_VERSION')\" -Environment \"${{ inputs.environment }}\"",
              "workflow": "gh workflow run deploy.yml --field version=\"$(cat deployment-artifacts/previous-version.txt 2>/dev/null || echo 'PREVIOUS_VERSION')\" --field environment=\"${{ inputs.environment }}\""
            }
          }
          ROLLBACK_EOF

      - name: Upload deployment artifacts
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ inputs.environment }}-${{ inputs.version }}
          path: deployment-artifacts/
          retention-days: 90

      - name: Upload latest deployment info for rollback
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ inputs.environment }}-latest
          path: deployment-artifacts/
          retention-days: 90
